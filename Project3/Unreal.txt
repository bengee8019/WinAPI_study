

	▶ 9.20

	언리얼로 어떤 포폴을 만들지 생각하기
	액션, TPS, FPS 추천

	한파트만 제대로 구현되도 인정받는다.
	퀄리티가 나온다는 전제 하에서

	게임 루프

	모작, 창작 상관 없지만
	 모작을 추천, 

======================================================================
	 ※ 엔진이란?

	 라이브러리의 집합체 + 툴, 에디터


	 엔진을 쓰는 이유는?

		ㄴ 개발 기간 단축 (그래픽이 주된 원인) 3D파트에서 수학 물리 범벅
		ㄴ 다이렉트, 불칸 


	 - 그래픽 프로그래밍

	 양대 산맥
		ㄴDX
		ㄴOpenGL

	 DX와 OpenGL의 차이점?
		ㄴ 좌표계 (마야 / 맥스까지도 전부 영향을 받는다.)
			ㄴ 왼손 / 오른손
				ㄴ 차이는 Z축의 진행방향과 X축의 방향

		- 왼손, 오른손 좌표계
				엄지를 기준으로 손목이 굽혀지는 방향으로 +

		ㄴ 기본 베이스는 DX -> 언리얼 / 유니티 -> OpenGL
		ㄴ 월드 좌표에 차이가 발생한다.
			ㄴ SRT/ TRS	(scale, rotation, transform) 적용 순서가 다르다
				배율연산부터 적용되면 나머지에도 영향을 준다.

	★중요!!  렌더링 파이프라인
		ㄴ 쉽게 말해 그리기 위한 일련의 처리 공정 과정이다.

		ㄴ built-in, SRP, URP, HDRP

			built-in	- 커스텀해서 사용할때 쓰는 공정 파트
			SRP			- 코드에 기반해서 돌아가는 파이프라인
			URP			- Unreal 혹은 Unity 렌더링 파이프라인
			HDRP		- High Dynamic Rendering Pipeline	셰이더만 따로 쓰는 파이프라인


			입자기반 파티클은 GPU연산 이미지기반 이펙트는 CPU연산

				ㄴ 9개의 Fixed PipeLine / Programmable PipeLIne

		1. 로컬 스페이스
			ㄴ 디자이너의 영역
				오브젝트의 기본적인 좌표계

		2. 월드 스페이스
			ㄴ 가상의 공간을 만들고 적용을 하기 전 단계 (★★★★★SRT★★★★★)

		3. 뷰 스페이스
			ㄴ 카메라 공간이라고 할 수 있다. 

		4. 백 스페이스 컬링
			ㄴ 보이지 않는 뒷부분을 처리 (엔진에서는 기본적으로 처리를 해준다.)

		★★★★★
		5. 라이트
			ㄴ 조명 최적화의 핵심 중 1개.
			ㄴ 전반사 / 난반사
			ㄴ 종류: Point(점) / Directional(방향성)(태양, 달) / Spot(점적)(가로등느낌) / Ambient(주변)(반딧불이)
				ㄴ 재질: Ambient(주변) / Diffuse(확산) / Specular(반사) / Emissive(방출)


		6. 클리핑
			ㄴ 카메라 영역 밖을 잘라내서 최적화하겠다.

		7. 프로젝션
			ㄴ 3D에서 2D로 변환하는 과정
				크게 2가지 기법이 있다.

				1) Perspective (원근 투영)
					ㄴ 3D
					ㄴ 원근감을 표현하겠다.

				2) Orsographic (직교 투영)
					ㄴ 2D
					ㄴ 원근감 없이(스케일 변형 없이) 바로 투영

		8. 뷰포트
			ㄴ 모니터 화면에 올린다.

		9. 레스터라이즈 (픽셀 보간)
			ㄴ 폴리곤 -> 픽셀
			ㄴ 스크린 좌표로 정점들을 변환하면 폴리곤 정보를 가지게 된다.
			ㄴ 레스터라이즈는 각각의 폴리곤을 출력하는데 필요한 픽셀컬러 값을 계산하는 과정
			ㄴ 기본적으로 컴퓨터가 처리한다.

		-DX		->	윈도우즈
			ㄴ DX 9 / 10 / 11 / 12

			교수님의 추천코스: 9 -> 11 찍고 상황보기


		-OpenGL ->	플랫폼 x (최소 단위의 cpu는 필요하다.)	미쓰비시 엘리베이터 참고하기

		둘다 지원하는 이유 - 다양한 플랫폼에 대한 호환성(DX는 윈도우에 종속성이 있다.)

		-DX 
		ㄴ 장점
			ㄴ

		ㄴ 단점
			ㄴ








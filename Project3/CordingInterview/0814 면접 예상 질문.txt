
3dmatrix

백준
프로그래머스
틈날때마다 문제 풀기



# 기술 면접

==========

1. 입사 동기?
ex) 왜 뽑아야 하는지 어필해 보시오.
	
	ㄴ 


2. 야근 여부와 의지에 대해?

ㄴ 회사의 구성원으로서 야근이 필요한 상황이 오면 당연히 참여해야 한다고 생각합니다.
	최선을 다해서 야근하는 일 수를 줄일 수 있도록 노력하겠습니다.


3. 외국어 할줄 아는가?

	가벼운 의사소통을 할정도의 영어를 할 수 있으며 
	유창하게 대화를 나누기는 어려운 수준이나 
	업무 수행하는데 있어서 지장은 없습니다


★
4. 본인의 코딩 스타일은 어떤지?(협업시 피곤한스타일인지 체크하기 위함)
ㄴ 먼저 설계 구조를 결정하고 그에 따른 패턴을 적용할지 


5. 다른 사람의 코드를 리딩하는 실력은 어느정도라고 생각하는지?

ㄴ 겸손하게 중~ 중상정도라고 하고
	디테일한 살 붙이기
	상 중 하로 나누자면 중에서 중상 정도로 리딩할 수 있다고 생각합니다.
	사람마다 생각이 다르기에 
	

6. 절차지향과 객체지향의 차이점에 대해서 알고 있는지

구조적 프로그래밍 중심

절차지향
함수기반
객체지향 
ㄴ 오브젝트-> 
컴포넌트기반


7. 할로우 나이트 혹은 메가맨 같은 플랫포머 게임을 해본적이 있는지?
있다면 이와 비슷한 장르의 게임 충돌 처리는 어떻게 하면 효율적일까요?
ㄴ 기반지식 어필 후 메인 답변 픽셀충돌



★★★★★
8. C/C++(C#) 사용했다고 알고 있는데 사용한 이유는?
ㄴ C#과 자바를 같이 언급하며 자바와의 비교장점어필. 
상용 엔진의 내부 구조는 기본적으로 C/C++ 기반이다.



9. 라이프 사이클에 대해서?(변수, 함수)
ㄴ Allocate -> Release -> MemoryPool

변수의 생명주기
ex)
stage1 같은 경우 메모리 해제-> 
OS에 남는 ram에 보관하고 다시 가져오는 방식

메모리풀에 반환하면 완전 날아가기때문에
다시 로딩해야한다.


08/14

10. 게임 프로그래머가 되고 싶은 이유는?
ㄴ 어릴때의 경험과 연관지으면 좋다!!

전공 , 게임을 잘한다 -> X


★
11. 그를 위해 어떤 노력을 했는지?
ㄴ 다룰줄 아는 언어 어필, 블로그 공부한 내용 어필


12. 읽고 있는 전공책이 있는지?
ㄴ 중급 이상의 책 이름 언급
	ex) 모던 c++
								
		용책(dx9), 	해골책(dx10), 	물방울책(dx11),	 노을책(dx12), 	공룡책(os)	추천
		공부와 포트폴리오를 병행하며 책을 참고하고 있으나 아직 

		ㄴ 해골책 -> dx10 망했다...
		처음 책으로 이걸 읽는다는건 좀...

	 dx 관련 공부를 하는 과정에서 막히거나 할 때 참고하기 위해서 ㅇㅇ책을 구매해서 읽기 시작했었습니다.
	 ㄴ -> 디테일하게 들어오면
	 최근 학업과 포트폴리오를 병행하면서 책을 마지막으로 읽은지 좀 되어서 자세한 내용이 기억이 나지 않습니다.
	 

		
13. 동료들과 의사 소통에 차이가 있을 때 본인의 대처 방식은?
ㄴ 
	문제 발생의 원인을 우선적으로 파악하고
	상대방을 존중 하되, 결과, 근거에 기반해서 옳은 방향으로 나아갈 수 있도록
	합리적으로 조율하겠습니다.


14. 객체지향의 5대 설계원칙에 대해 설명해 보시오.

	SOLID	- 추상화, 다형성에 관한 원칙.

	1. SRP	단일 책임의 원칙
		ㄴ
	2. OCP	개방 폐쇄의 원칙
		ㄴ	
	3. LSP	리스코프 치환의 원칙
		ㄴ
	4. ISP	인터페이스 분리의 원칙
		ㄴ
	5. DIP	의존 역전의 원칙
		ㄴ


15.	스택과 힙의 차이점 및 설명?
@@@@각각의 장단점같은 살을 추가로 붙이면 좋겠다.

＃ 스택:		함수의 호출에 관계되는 변수가 저장되는 영역 약 1MB
		말 그대로 쌓이는 방식이기 때문에, 후입 선출 방식(LIFO)으로 작동.
		
＃ 힙:		사용자에 의해 동적으로 관리되는 영역	RAM의 약 80%까지 사용가능
		, 넘어갈 경우 하드디스크의 일부를 가상메모리로 당겨온다.
		메모리 leak을 주의해야 한다. STL을 사용시 스마트 포인터에 의해 
		메모리가 자동으로 해제할 수 있기 때문에 수월하게 메모리 관리를 할 수 있다.
	
	
16. 벨류 타입과 레퍼런스 타입에 대해 설명해 보시오.

	벨류타입 사용 시 단점 - 은근히 무거운 널체크를 많이 사용하게 된다.
	
	C11 에서는 안되지만 C17에서는 된다.
	int** &number = &pa;
	

17. 프로그래밍의 여러 분야 중 본인이 가장 관심있고 해보고 싶은 분야가 있다면?
	-> 회사가 원하는 모집분야에 대한 관심이 있는지 확인하기 위한 질문이기도 함.

	클라이언트 쪽을 원한다면 -> 그래픽스 주제가 반드시 나와야 한다.
	서버 쪽이라면 -> SQL( 데이터베이스를 효율적으로 관리할 수 있는 툴 관련 이야기)

	또는 Shader -> 선형대수 행렬연산 관련 질문들 예상
	또는 최적화 관련


★★★★★ 역질문 ★★★★★
회사마다 마지막에 반드시 등장하는 코너


18. 마지막으로 회사에 질문할것이 있는지?	(반드시 3가지 이상 준비해간다.)

	1. 합격하게 되면 맡게될 업무 분야는 어떻게 되는지 궁금합니다.?

	2. 저는 C++언어실력을 꾸준히 성장시켜서 전문가가 되고 싶다는 목표가 있습니다.
		이 회사에서 맡는 업무를 수행하면서 제가 성장할 수 있는 부분에는 어떤게 있을지 궁금합니다. 

	3. 신입사원으로서 꼭 갖췄으면 하는 필수 요소가 있으신가요?


19. C++과 C#의 차이점에 대해 설명해 보시오.

	컴파일러의 유무, C#은 컴포넌트 지향 프로그래밍 언어
	엔진에서 사용시에는 둘 다 컴파일러가 따로 없다.
	C++은 독립적인 언어의 느낌이 강하고 
	C#은 닷넷의 영향을 받는다.

ㄴ 파생 질문 : 각 언어의 배열 선언 방법은?

	c++ int num[];
	c# int[] num;


20. 구조체와 클래스의 차이?

	접근제어지시자의 차이
	어셈블리 영역에서 별다른 처리 없이 접근이 가능한지의 차이
	

21. 엡실론이 무엇인가? 왜 사용하는가? 왜 오차가 날 수 있는지?

	반올림 오차 - 컴퓨터에서는 실수를 정확하게 표현하는데 기술적 한계가 있다.
	오차값에 의해서 조건식을 지나치는 경우가 생길 수 있기 때문에
	정확한 상수값을 사용하여 조건을 걸러내기 위함입니다.



22. 오버로딩과 오버라이딩의 개념 및 차이점

	오버로딩 -> 함수의 중복정의
	오버라이딩 -> 함수의 재정의
	


23. 다중 상속에 대한 질문(C++/C#-> 1. 가능한지?, 2. 왜 안되는지?)

	C++에선 가능은 하고 C#에서는 불가능하다.
	다이아몬드 구조의 상속과정에서 소멸자의 호출에 있어 애매해진다.
	객체 관계성이 깨져 include guard가 안된다.


24. virtual 키워드 동작 방식

	컴파일타임에 가상함수 테이블을 생성하지만
	그를 기반으로 런타임 바로 직전에 동적 바인딩을 통해 함수의 호출순서가 결정됩니다.


25. virtual 멤버 함수에 대해서

	일반적인 함수는 포인터 형식에 의해 함수가 결정되지만
	virtual 멤버 함수의 경우는 가상함수 테이블에 올라간 인스턴스를 참조해서 함수를 결정한다.


26. 가상함수 Table에 대한 설명?

	실행될 함수의 함수 포인터가 나열된 Table
	포인터 배열을 사용하여 함수의 호출 순서를 관리한다.



27. New/ Malloc 개념과 차이점? 그리고 Table과 연관관계는?

	C++에서는 New -> delete	생성자를 자동으로 호출해준다. 
	인스턴스가 생성되어 테이블에 올라갈 수 있다.
	C에서는 Malloc -> free	메모리 할당의 기능만을 수행한다.




28. 순수 가상함수를 만들면 메모리상에 몇 바이트 차지하는가?
ㄴ 실제 인스턴스에 의해 호출이 되기 전까지는 메모리를 차지하지 않는다.

	순수 가상함수가 한개라도 존재하면 인스턴스를 생성할 수 없다.
	반드시 재정의가 필요하기 때문에.. ->이를 추상 클래스라고 한다.

	순수가상함수와 가상소멸자로만 이루어진 클래스는 인터페이스라고 하고
	자식 클래스의 구현 방식을 강제한다. 





-> 스타트 + 중소 = 연봉++,		중견, 대기업에서는 기본 질문
29. 가상함수 테이블을 만들 때 메모리 상에서 일어나는 과정을 설명해보시오.
ㄴ 결합 바인딩 (정적 바인딩, 동적 바인딩)
ㄴ 일반 함수들은 정적 바인딩을 기본으로 하고
ㄴ 호출 시 인스턴스에 맞게끔 런타임 시에 함수 포인터에 의한 동적 바인딩이 가능하도록 변환


30. 컴파일 순서에 대해 얘기해 보시오
ㄴ 언리얼에서의 컴파일을 물어본다면 도망쳐라
ㄴ 전처리 - 컴파일 - 어셈블리 - 링크
추가적인 설명을 붙여서 이야기
전처리 지시문을 컴파일러가 이해할 수 있게 변환해줍니다.
컴파일이 완료된 소스코드는 어셈블리어로 변환됩니다.


31. STL (Standard Template Library)
ㄴ 자료 구조와 알고리즘의 효율적인 관리와 처리를 위해 구성된 템플릿 라이브러리 입니다.

32. 포인터가 무엇인가?
ㄴ 데이터의 주소값을 저장하는 자료형
OS에 따라서 포인터가 차지하는 메모리의 크기가 다르다.

32비트 - 4byte
64비트 - 8byte


33. 벡터 / 리스트의 차이점은?
ㄴ 리스트는 중간요소의 삽입, 삭제가 쉽다.
ㄴ 벡터는 인덱스로 배열 요소에 접근이 가능하나 리스트는 불가능하다. 
ㄴ 메모리 상에 연속적인 배치 (선형, 비선형구조)
	


34. 벡터에 처음 할당된 메모리 이상의 데이터가 들어갔다고 가정을 했을 때 이때 나오는 상황은 어떨까?
ㄴ 기존 크기의 2배 만큼의 공간을 추가로 할당하여 기존의 메모리를 복사하는 과정이 발생합니다.
	이 과정은 코스트가 높기 때문에 벡터의 쓰임새를 예측하여 초기에 충분한 capacity를 할당해주는것이 좋습니다.

별도의 선행처리가 없다면 오류가 발생한다.
일반적으로 STL의 멤버함수를 통해 추가하기 때문에 문제가 발생하지 않는것 뿐.


★★★
35. 회사에서 야근을 하다가 오류를 발견했다. (본인이 판단했을 때 심각하다고 느낀)
	이 때 본인은 어떻게 대처할 것인가?
ㄴ 늦은 시간이지만 상급자에게 전화해서 알리는 것을 최우선으로 하겠습니다.
ㄴ 



36. 네임 맹글링이란?
ㄴ 


37. 명시적 링킹이란?
ㄴ 

== 봉인 ==

lowLevel, High Level


언매니지드, 매니지드

메모리 접근이 가능한지



다 끝나고 인사하고 나가기 직전에
면접 내용 피드백 
ㄴ 예의 바르게 여쭤본다.


===================================================================================
08/22

1. 마음가짐
ㄴ 인성
	ex) 물어볼때도 해볼거 다 해보고 조언을 구한다.

2. 공통 역량
ㄴ 끈기
	ex) 안되면 될때까지 방법을 찾으려는 자세

3. 전문 역량
ㄴ 


1년에 게임 6개정도는 해보는걸 추천..
장르를 다양하게

게임 프로그래머라면
재미 이론 이라는 책을 읽어보자

의사소통
문제가 생기면 주변에 알려라.


일단 써보고 익숙해진 후에 전문서적을 읽으면 효율이 좋다!!


복잡도, 결합도 관리
(템플릿, 클래스, 패턴)을 적절하게 사용해서 관리하자.










===================================================================================
08/10

슈팅

설계 , 구조화, 모듈화

보스와 일반 적은 별개로 구성한다.
보스는 별개의 메모리를 할당해줘야 하기 때문

기능이 복잡하고 다양한 코드를 짤때는 조금씩 구현해야 한다.




/*
과제 1. 로켓에 flame 이미지 추가

프레임렌더로 flame을 렌더한다.

flame 클래스에는 로켓에 대한 정보가 없으면 안되며 
MainGame또한 Flame에 대한 정보를 알 필요가 없다.


과제 2. 보류




*/
=========================================================
0811

과제 1
로켓 미사일 발사

- 미완성 함수를 완성하고 로켓이 미사일을 발사한다.

- 미사일 이미지는 프레임으로 출력

과제 2
팀 포트폴리오로 만들게임 선정 임박

과제 3 
타일맵 만들기

- 사용자가 입력한 숫자로 타일 맵을 그린다.(최대 사이즈: 100)
ㄴ EX: 20을 입력하면 20 X 20 사이즈의 타일이 화면에 그려진다.

- 타일맵 안에는 랜덤한 위치에 이미지 2장이 들어간다.

- 이미지는 매번 타일맵을 새로 그려줄 때마다 위치가 바뀌어야 하고
	그려진 이미지는 마우스로 클릭할 수 있어야 하고 위치 또한 변경할 수 있어야 한다.

특정 키를 누르면 입력창이 뜨고 

- 필수: STL 벡터

zeromemory

copymemory

movememory
- copymemory에 비해 조금더 느리다

fillmemory

4총사를 활용해보자!

입력하는 파트 또한 런타임에서 가능하도록

금, 토, 일 
모인 시간 확인 가능한 전, 후 사진
총 6장!
=========================================================



enemy -> 설계적으로 신경을 쓰자

설계 기반으로
player, map 파트와 연동


과제 1. 움직이는 적 패턴 추가
- 움직임을 서로 다르게 해온다.
ㄴ 패턴은 총 3가지 구현


과제 2. 로켓 무장 변경 추가

ㄴ f1: 일반 미사일 장착
ㄴ f2: 산탄
ㄴ f3: 미니 로켓 생성
ㄴ f4: 실드
ㄴ f5: 유도 미사일을
ㄴ f6: 레이저
ㄴ f7: 블랙홀
	ㄴ 영향을 받는 적과 아닌 적으로 구분
	ㄴ 블랙홀의 중점에 가까운 적일수록 스킬이 끝나면 튕겨나가는 힘이 강해진다.


★ 스킬같은 경우는 모듈화를 해서 
다른 곳에서도 가져다 쓸 수 있도록 구조를 잘 짜보자.




클래스간 효율적인 정보전달
std::functional
찾아보기!!



08.17 과제

과제 1. 미사일 충돌 처리

- 내가 발사한 미사일로 적을 제거한다.
	ㄴ 본인이 생각한 가장 효율적인 (객체 지향적인) 방법으로

과제 2. 체력 바 구현

- 로켓과 적의 체력바를 구현한다.


2 가지를 구현한다.
	ㄴ 1. 체력바를 각각의 객체위에 띄워주는 방법
	ㄴ 2. 적 객체 한정으로 체력바를 공유하는 방법


	과제 1. SVN or Git 점검

	- 사용법 터득해서 X자 모양이 되도록 팀원끼리 대화를 나눈다.

	- 작업 이력 캡처해서 같이 제출

	과제 2. 애니메이션 클래스에 속한 함수 완성하기

	- 미완성 함수 완성시키기

	setPlayFrame()
	setPlayFrame()
	setFPS()

	과제 3. 세미 포폴 선행 작업 시작하기
		이미지 리소스 작업
		팀이랑 같이하면 더 빠르게 할 수 있겠다!!


